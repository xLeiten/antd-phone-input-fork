declare const locale: {
    arEG: import("antd/es/locale").Locale;
    bnBD: import("antd/es/locale").Locale;
    csCZ: import("antd/es/locale").Locale;
    elGR: import("antd/es/locale").Locale;
    esES: import("antd/es/locale").Locale;
    faIR: import("antd/es/locale").Locale;
    frCA: import("antd/es/locale").Locale;
    glES: import("antd/es/locale").Locale;
    hrHR: import("antd/es/locale").Locale;
    idID: import("antd/es/locale").Locale;
    jaJP: import("antd/es/locale").Locale;
    kmKH: import("antd/es/locale").Locale;
    koKR: import("antd/es/locale").Locale;
    lvLV: import("antd/es/locale").Locale;
    mnMN: import("antd/es/locale").Locale;
    nbNO: import("antd/es/locale").Locale;
    nlNL: import("antd/es/locale").Locale;
    ptPT: import("antd/es/locale").Locale;
    siLK: import("antd/es/locale").Locale;
    srRS: import("antd/es/locale").Locale;
    thTH: import("antd/es/locale").Locale;
    ukUA: import("antd/es/locale").Locale;
    viVN: import("antd/es/locale").Locale;
    zhTW: import("antd/es/locale").Locale;
    azAZ: import("antd/es/locale").Locale;
    byBY: import("antd/es/locale").Locale;
    daDK: import("antd/es/locale").Locale;
    enGB: import("antd/es/locale").Locale;
    etEE: import("antd/es/locale").Locale;
    fiFI: import("antd/es/locale").Locale;
    frFR: import("antd/es/locale").Locale;
    heIL: import("antd/es/locale").Locale;
    huHU: import("antd/es/locale").Locale;
    isIS: import("antd/es/locale").Locale;
    kaGE: import("antd/es/locale").Locale;
    kmrIQ: import("antd/es/locale").Locale;
    kuIQ: import("antd/es/locale").Locale;
    mkMK: import("antd/es/locale").Locale;
    msMY: import("antd/es/locale").Locale;
    neNP: import("antd/es/locale").Locale;
    plPL: import("antd/es/locale").Locale;
    roRO: import("antd/es/locale").Locale;
    skSK: import("antd/es/locale").Locale;
    svSE: import("antd/es/locale").Locale;
    tkTK: import("antd/es/locale").Locale;
    urPK: import("antd/es/locale").Locale;
    zhCN: import("antd/es/locale").Locale;
    bgBG: import("antd/es/locale").Locale;
    caES: import("antd/es/locale").Locale;
    deDE: import("antd/es/locale").Locale;
    enUS: import("antd/es/locale").Locale;
    frBE: import("antd/es/locale").Locale;
    gaIE: import("antd/es/locale").Locale;
    hiIN: import("antd/es/locale").Locale;
    hyAM: import("antd/es/locale").Locale;
    itIT: import("antd/es/locale").Locale;
    kkKZ: import("antd/es/locale").Locale;
    knIN: import("antd/es/locale").Locale;
    ltLT: import("antd/es/locale").Locale;
    mlIN: import("antd/es/locale").Locale;
    nlBE: import("antd/es/locale").Locale;
    ptBR: import("antd/es/locale").Locale;
    ruRU: import("antd/es/locale").Locale;
    slSI: import("antd/es/locale").Locale;
    taIN: import("antd/es/locale").Locale;
    trTR: import("antd/es/locale").Locale;
    zhHK: import("antd/es/locale").Locale;
};
type Locale = keyof typeof locale;
declare const _default: (lang: Locale) => {
    PhoneInput: any;
    locale: string;
    Pagination?: import("rc-pagination").PaginationLocale;
    DatePicker?: import("antd/es/date-picker/generatePicker").PickerLocale;
    TimePicker?: Record<string, any>;
    Calendar?: Record<string, any>;
    Table?: import("antd/es/table/interface").TableLocale;
    Modal?: import("antd/es/modal/locale").ModalLocale;
    Tour?: import("antd/es/tour/interface").TourLocale;
    Popconfirm?: import("antd/es/popconfirm/PurePanel").PopconfirmLocale;
    Transfer?: import("antd/es/transfer").TransferLocale;
    Select?: Record<string, any>;
    Upload?: import("antd/es/upload/interface").UploadLocale;
    Empty?: import("antd/es/empty").TransferLocale;
    global?: Record<string, any>;
    Icon?: Record<string, any>;
    Text?: {
        edit?: any;
        copy?: any;
        copied?: any;
        expand?: any;
        collapse?: any;
    };
    Form?: {
        optional?: string;
        defaultValidateMessages: import("rc-field-form/lib/interface").ValidateMessages;
    };
    Image?: {
        preview: string;
    };
    QRCode?: {
        expired?: string;
        refresh?: string;
        scanned?: string;
    };
    ColorPicker?: {
        presetEmpty: string;
    };
};
export default _default;
